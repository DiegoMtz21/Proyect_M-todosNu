import numpy as np
import matplotlib.pyplot as plt
from tkinter import *
from tkinter import messagebox
from sympy import sympify, symbols, diff, lambdify

class CalculadoraRaices:
    def __init__(self, ventana):
        self.ventana = ventana
        self.ventana.title("Buscador de Raíces Numéricas")
        self.ventana.geometry("900x700")

        self.opcion_metodo = StringVar(value="newton")
        self.entrada_funcion = StringVar()
        self.valor_inicial = StringVar()
        self.valor_secante = StringVar()
        self.maximo_iteraciones = StringVar(value="1000")
        self.valor_tolerancia = StringVar(value="1e-10")
        self.opcion_marcador = StringVar(value="o")  # Marcador por defecto
        self.modo_dispersion = BooleanVar(value=False)  # False para línea, True para puntos

        self.crear_gui()

    def crear_gui(self):
        marco = Frame(self.ventana, padx=20, pady=20)
        marco.pack(fill=BOTH, expand=True)

        Label(marco, text="Escoge un método:").grid(row=0, column=0, sticky=W, pady=5)
        Radiobutton(marco, text="Newton-Raphson", variable=self.opcion_metodo, value="newton").grid(row=0, column=1, sticky=W)
        Radiobutton(marco, text="Secante", variable=self.opcion_metodo, value="secante").grid(row=0, column=2, sticky=W)

        Label(marco, text="f(x):").grid(row=1, column=0, sticky=W, pady=5)
        Entry(marco, textvariable=self.entrada_funcion, width=40).grid(row=1, column=1, columnspan=2, sticky=W)
        # Se ha eliminado la línea que mostraba el ejemplo

        Label(marco, text="x0:").grid(row=3, column=0, sticky=W, pady=5)
        Entry(marco, textvariable=self.valor_inicial, width=15).grid(row=3, column=1, sticky=W)

        self.etiqueta_x1 = Label(marco, text="x1 (solo Secante):")
        self.campo_x1 = Entry(marco, textvariable=self.valor_secante, width=15)

        Label(marco, text="Máx. Iteraciones:").grid(row=5, column=0, sticky=W, pady=5)
        Entry(marco, textvariable=self.maximo_iteraciones, width=15).grid(row=5, column=1, sticky=W)

        Label(marco, text="Tolerancia:").grid(row=6, column=0, sticky=W, pady=5)
        Entry(marco, textvariable=self.valor_tolerancia, width=15).grid(row=6, column=1, sticky=W)

        Label(marco, text="Marcador:").grid(row=7, column=0, sticky=W, pady=5)
        Entry(marco, textvariable=self.opcion_marcador, width=5).grid(row=7, column=1, sticky=W)

        Label(marco, text="Modo Dispersión:").grid(row=8, column=0, sticky=W, pady=5)
        Checkbutton(marco, text="Puntos", variable=self.modo_dispersion, onvalue=True, offvalue=False).grid(row=8, column=1, sticky=W)

        Button(marco, text="Calcular", command=self.calcular_raiz).grid(row=9, column=0, columnspan=3, pady=10)

        Label(marco, text="Salida:").grid(row=10, column=0, sticky=NW, pady=5)
        self.zona_resultados = Text(marco, height=20, width=80, wrap=WORD, font=('Courier', 10))
        self.zona_resultados.grid(row=11, column=0, columnspan=3)

        barra_scroll = Scrollbar(marco, command=self.zona_resultados.yview)
        barra_scroll.grid(row=11, column=3, sticky='ns')
        self.zona_resultados.config(yscrollcommand=barra_scroll.set)

        self.opcion_metodo.trace('w', self.actualizar_formulario)
        self.actualizar_formulario()

    def actualizar_formulario(self, *args):
        if self.opcion_metodo.get() == "secante":
            self.etiqueta_x1.grid(row=4, column=0, sticky=W, pady=5)
            self.campo_x1.grid(row=4, column=1, sticky=W)
        else:
            self.etiqueta_x1.grid_forget()
            self.campo_x1.grid_forget()

    def verificar_datos(self):
        try:
            expresion = self.entrada_funcion.get()
            if not expresion:
                raise ValueError("Debes ingresar una función.")

            x = symbols('x')
            expresion_simbolica = sympify(expresion)
            funcion_f = lambdify(x, expresion_simbolica, 'numpy')

            iteraciones = int(self.maximo_iteraciones.get())
            if iteraciones <= 0:
                raise ValueError("Las iteraciones deben ser mayores a cero.")

            tolerancia = float(self.valor_tolerancia.get())
            if tolerancia <= 0:
                raise ValueError("La tolerancia debe ser positiva.")

            metodo = self.opcion_metodo.get()

            if metodo == "newton":
                x0 = float(self.valor_inicial.get())
                derivada_f = lambdify(x, diff(expresion_simbolica, x), 'numpy')
                return funcion_f, derivada_f, x0, None, iteraciones, tolerancia
            else:
                x0 = float(self.valor_inicial.get())
                x1 = float(self.valor_secante.get())
                if x0 == x1:
                    raise ValueError("x0 y x1 no deben ser iguales en el método Secante.")
                return funcion_f, None, x0, x1, iteraciones, tolerancia

        except Exception as err:
            messagebox.showerror("Error", f"Verifica los datos: {str(err)}")
            return None

    def calcular_raiz(self):
        self.zona_resultados.delete(1.0, END)

        datos = self.verificar_datos()
        if datos is None:
            return

        f, f_derivada, x0, x1, iteraciones, tolerancia = datos
        tipo = self.opcion_metodo.get()
        marcador = self.opcion_marcador.get()
        modo_dispersion = self.modo_dispersion.get()

        try:
            self.zona_resultados.insert(END, f"MÉTODO: {'Newton-Raphson' if tipo == 'newton' else 'Secante'}\n")
            self.zona_resultados.insert(END, f"f(x) = {self.entrada_funcion.get()}\n")

            if tipo == "newton":
                self.zona_resultados.insert(END, f"f'(x) = {diff(sympify(self.entrada_funcion.get()), symbols('x'))}\n")
                self.zona_resultados.insert(END, f"x0 = {x0}\n")
                resultado, trayectoria = self.metodo_newton(f, f_derivada, x0, iteraciones, tolerancia)
            else:
                self.zona_resultados.insert(END, f"x0 = {x0}, x1 = {x1}\n")
                resultado, trayectoria = self.metodo_secante(f, x0, x1, iteraciones, tolerancia)

            self.zona_resultados.insert(END, "\n" + "="*50 + "\n")
            self.zona_resultados.insert(END, f"\nResultado: Raíz ≈ {resultado:.8f}\n")
            self.zona_resultados.insert(END, f"f(raíz) = {f(resultado):.2e}\n")

            # Graficar la trayectoria
            self.graficar_trayectoria(trayectoria, marcador, modo_dispersion)

        except Exception as err:
            messagebox.showerror("Cálculo fallido", f"Se produjo un error: {str(err)}")

    def metodo_newton(self, f, f_prime, x_inicial, max_iter, tol):
        self.zona_resultados.insert(END, "\nIteración\t x\t\t f(x)\t\t f'(x)\t Error\n")
        self.zona_resultados.insert(END, "-"*80 + "\n")

        x = x_inicial
        trayectoria = []

        for i in range(max_iter):
            fx = f(x)
            fpx = f_prime(x)

            x_nuevo = x - fx / fpx
            error = abs(x_nuevo - x)

            self.zona_resultados.insert(END, f"{i+1:5d}\t{x:10.6f}\t{fx:10.6f}\t{fpx:10.6f}\t{error:10.6f}\n")
            trayectoria.append((i+1, x))

            if error < tol and abs(fx) < tol:
                self.zona_resultados.insert(END, f"\nConvergió en {i+1} iteraciones\n")
                return x_nuevo, trayectoria

            x = x_nuevo

        self.zona_resultados.insert(END, f"\nAdvertencia: Límite de {max_iter} iteraciones alcanzado\n")
        return x, trayectoria

    def metodo_secante(self, f, x0, x1, max_iter, tol):
        self.zona_resultados.insert(END, "\nIteración\t x\t\t f(x)\t\t Error\n")
        self.zona_resultados.insert(END, "-"*80 + "\n")

        fx0 = f(x0)
        fx1 = f(x1)

        self.zona_resultados.insert(END, f"{0:5d}\t{x0:10.6f}\t{fx0:10.6f}\t{'--':>10}\n")
        self.zona_resultados.insert(END, f"{1:5d}\t{x1:10.6f}\t{fx1:10.6f}\t{abs(x1-x0):10.6f}\n")

        trayectoria = [(0, x0), (1, x1)]

        for i in range(1, max_iter):
            if abs(fx1 - fx0) < 1e-15:
                self.zona_resultados.insert(END, "\n¡Error! División entre casi cero.\n")
                return x1, trayectoria

            x_nuevo = x1 - fx1 * (x1 - x0) / (fx1 - fx0)
            error = abs(x_nuevo - x1)
            fx_nuevo = f(x_nuevo)

            self.zona_resultados.insert(END, f"{i+1:5d}\t{x_nuevo:10.6f}\t{fx_nuevo:10.6f}\t{error:10.6f}\n")
            trayectoria.append((i+1, x_nuevo))

            if error < tol and abs(fx_nuevo) < tol:
                self.zona_resultados.insert(END, f"\nConvergió en {i+1} iteraciones\n")
                return x_nuevo, trayectoria

            x0, x1 = x1, x_nuevo
            fx0, fx1 = fx1, fx_nuevo

        self.zona_resultados.insert(END, f"\nAdvertencia: Límite de {max_iter} iteraciones alcanzado\n")
        return x1, trayectoria

    def graficar_trayectoria(self, trayectoria, marcador, modo_dispersion):
        # Extraer iteraciones y valores de x
        iteraciones, valores_x = zip(*trayectoria)

        # Crear la gráfica
        plt.figure(figsize=(8, 6))
        if modo_dispersion:
            plt.plot(iteraciones, valores_x, marker=marcador, linestyle='', color='b')  # Solo puntos
        else:
            plt.plot(iteraciones, valores_x, marker=marcador, linestyle='-', color='b')  # Línea continua
        plt.title('Trayectoria de Iteraciones')
        plt.xlabel('Iteración')
        plt.ylabel('Valor de x')
        plt.grid(True)
        plt.show()

if __name__ == "__main__":
    ventana_raices = Tk()
    app = CalculadoraRaices(ventana_raices)
    ventana_raices.mainloop()
